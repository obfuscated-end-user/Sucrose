[<wavelink.tracks.YouTubeTrack object at 0x000001DA02591990>, <wavelink.tracks.YouTubeTrack object at 0x000001DA025A4990>, <wavelink.tracks.YouTubeTrack object at 0x000001DA02599650>, <wavelink.tracks.YouTubeTrack object at 0x000001DA025C04D0>]


[<wavelink.tracks.YouTubeTrack object at 0x000001DA025A4990>, <wavelink.tracks.YouTubeTrack object at 0x000001DA02599650>, <wavelink.tracks.YouTubeTrack object at 0x000001DA025C04D0>]

[<wavelink.tracks.YouTubeTrack object at 0x000001DA02599650>, <wavelink.tracks.YouTubeTrack object at 0x000001DA025C04D0>]


test links
    youtube
        # short songs
            s!p 0SqhSfx2TkE # family reunion
            s!p C6bCWMdarZI # the ballad of wilhelm fink
            s!p 7vwtjFenq-Q # give up
            s!p 3CV4yrXm9qI # lover's oath
        # normal songs
            s!p DF1W3DrXOME
        # long songs
            s!p 5dZy-TL4bfs
            s!p F5b3laSpOKQ
            s!p OJrQv_7bcjg
    spotify
        # short songs
            -
        # normal songs
            -
        # long songs
            s!p https://open.spotify.com/track/4IuVWyD0fgFvX6V5CL0mHC?si=f39651d6345241aa

family reunion o
the ballad of wilhelm fink 0
give up x
lover's oath 

s!p 0SqhSfx2TkE
s!p C6bCWMdarZI
s!p 7vwtjFenq-Q
s!p 3CV4yrXm9qI
s!p 8EGliGWfuNI
s!p BmbM5B4NjxY
s!p zIghUDfX2RY
s!skip
s!pause
s!resume
s!p https://www.youtube.com/playlist?list=PL2ZoROAzBSj4AY-DJEj-Vns2baPXVguCV
s!p https://www.youtube.com/playlist?list=PLSIxbPZbq9G5RNVKJw94vWJCCsmhGvNsh
s!p https://music.youtube.com/playlist?list=PLcsEW3Q4-DYF9EuwCq4gbB7HvDka7GUZO
s!p https://open.spotify.com/playlist/1ihmoXloxabwrOW180thW5?si=1892ec267f654bb7
s!p https://open.spotify.com/playlist/5ss12QTZCFYk3xjOkCbsWb?si=85336e1e3c114de0
s!p https://open.spotify.com/playlist/1UIIivYyhNpwgo7HcgABBo?si=e58d59d342c2447b

EXPECTED BEHAVIORS/PSEUDOCODE
s!play song:
    if queue is empty:
        append song and play it
    else if queue is not empty:
        append song to queue
        wait for an s!next or wait for current song to end

s!skip:
    if queue is empty:
        skip the song and stop playing
    else if queue is not empty:
        stop the current song_queue[0] (current song)
        pop song_queue[0]
        play the next song in the queue (song after song_queue[0])

s!stop:
    stop the current song
    empty the queue
^ do this regardless of the state of the queue (empty or not)

s!pause:
    if user is not in a voice channel or not in the same voice channel as the bot:
        do nothing
    if user is in a voice channel:
        if a song is playing:
            pause the song
        else if song is paused:
            do nothing
        else if nothing is playing:
            do nothing

    s!resume:
    if user is not in a voice channel or not in the same voice channel as the bot:
        do nothing
    if user is in a voice channel:
        if a song is playing:
            do nothing
        else if song is paused:
            resume the song
        else if nothing is playing:
            do nothing

link formats
Spotify:
    TRACK:
        https://open.spotify.com/track
    ALBUM:
        https://open.spotify.com/album
    PLAYLIST:
        https://open.spotify.com/playlist
YouTube
    VIDEO:
        https://www.youtube.com/watch?v=
    PLAYLIST:
        https://www.youtube.com/playlist?list=
YouTube Music
    TRACK:
        https://music.youtube.com/watch?v=
    PLAYLIST:
        https://music.youtube.com/browse

    

TO-DO:
make this bot play music, support both youtube and spotify urls
distinguish offline from invisibility status, if not impossible

NOTE:
there's a tendency that discord syncs the slash commands slow as shit and are not recognized immediately, but their command_prefix counterparts work fine.

MUSIC RELATED COMMANDS SHIT
TO-DO:
play
stop
pause
resume
next/skip
queue, to show the queue
remove index
leave voice channel after set interval
support playlists
support spotify
IMPORTANT: catch exceptions holy fucking shit
    unavailable videos
    region locked spotify songs

bugs:
1. if one plays a song and stops it, and tries to play another song, it will get added to the queue instead.
2. may be related to the bug above but s!p song shouldn't replace the current song.
3. if the song ends, it should play the next song in the queue.
4. after a song finishes playing, trying to play another song will not play it but only add it to the queue.
5. the first two songs works fine when played from the queue, the 3rd, 5th, 7th... are skipped over and the 4th, 6th, 8th... songs are played instead.
6. pause and resume commands still kinda wonky
7. play a song, pause it then skip it. it skips the first song and plays the second song correctly. but if you try using s!pause again, the second song won't pause. gets fixed when you type s!resume.

DEBUG
normal flow (without skips):
play x4 ðŸ‘Œ
with other commands:
play - play - next - pause - resume - pause - next - resume
play - play - next - play
    - appends song 1 to queue (and plays it)
    - appends song 2 to queue
    - plays 2nd song (but queue is empty)
    - 3rd song replaces the 2nd song (with queue still empty)
play - play - play - play - next - next
    - play 4 songs
    - next song is correct (second song)
    - next song is wrong, last song is played instead (third song never gets played)
play - stop - play ðŸ‘Œ
play - play - pause - next - play

RESOLVED (for now)
1. queue plays next song automatically as expected
2. skip works correctly instead of skipping to the wrong song/repeating the skipped song


# YOUTUBE MUSIC PLAYLIST
        elif "https://music.youtube.com/browse" in search:
            pass
        # SPOTIFY
        elif "https://open.spotify.com/" in search:
            if "track" in search:
                pass
            elif "album" in search:
                pass
            elif "playlist" in search:
                pass

if page == 1:
                        if first_track:
                            queue_string += f"-> {self.song_queue.index(song) + 1}. {song} - ({self.format_song_length(song.length)}) (current track)\n"
                            first_track = False
                        queue_string += f"a  {self.song_queue.index(song) + 1}. {song} - ({self.format_song_length(song.length)})\n"
                    else:
                        queue_string += f"  {self.song_queue.index(song) + 1}. {song} - ({self.format_song_length(song.length)})\n"